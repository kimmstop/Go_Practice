code -> packages -> modules
1. Greeting and Hello Module
go mod init {   }
- 다른 code에서 사용될 module임을 명시하는 go.mod 만들기
- {  }에는 module의 경로를 넣는다. 
- 이 경로는 다른 패키지에서 해당 패키지를 import할때 주소로 사용된다. 
- 작성한 code가 지원하는 GO 버전과 dependency들을 명시

func 함수이름 (파라미터이름 파라미터타입) 함수반환형{

	}
	
	
GO언어에서는 대문자로 시작하는 함수는 다른 패키지에서 호출할 수 있다.
함수, 변수이름을 대문자로 적으면 해당 패키지 내에서 exported names로 되며
이들은 다른 패키지에서 해당 패키지를 import하였을 경우 사용 가능

:= 연산자는 변수의 선언과 초기화를 묶은 연산자이다
message := fmt.Sprintf("HI, %v, Welcome", name)
- var message string
- message = fmt.Sprintf("HI, %v, Welcome", name)

caller moudule이 callee module을 찾기 위해서 caller module의 go.mod 파일을
수정해야 한다. caller go파일에서 import { } 부분에서 { }부분을 
실제 callee module이 있는 경로로 go.mod의 내용을 수정해야한다. 
[go.mod]
	replace example.com/greetings => ../greetings


$ go build

[go.mod]
	replace example.com/greetings => ../greetings

	require example.com/greetings v0.0.0-00010101000000-000000000000
	ㄴ 이 모듈이 require ~~ 에 dependency가 있다는 뜻이다.
	

	
replace는 아직 publish 되지 않은 모듈을 찾게 해준다.
이미 publish된 모듈을 사용한다면 replace대신 require을 사용하면 된다.
[go.mod]
	require example.com/greetings v1.1.0
-----------------------------------------------------
2. Error handling
GO함수에서는 여러값을 반환할 수 있다.
nil은 에러가 없다는 뜻이다. 

log 패키지를 import하여 prefix와 flag 설정가능 
prefix는 log 메세지의 시작을 미리 설정해준다. 
log.Fatal(err) 함수로 에러 메세지를 출력할 수 있다. 

----------------------------------------------------------
3. Return a random greeting

slice - 배열과 비슷하나 사이즈가 동적으로 변함 -> vector와 비슷한듯
rand.Intn(n int) int - 0초과 ~ n 이하의 랜덤한 양의 정수를 반환
-----------------------------------------------------------
4. Return greetings for multiple people
 map은 make(map[키 타입]value타입) 으로 선언한다. 


blank identifier "_" - NULL과 비슷하다. 
	for loop에서의 사용 : multiple assignment 상황에서 
	사용하지 않는 값을 _로 하여 불필요한 dummy 값으로 만드는 것을 피함
	하지만 error를 _로 지정하는 것은 안된다.
	
	사용하지는 않지만 중요한 변수를 _로 사용






